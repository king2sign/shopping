
说明：
	也就是一个Vue实例里面用到的一些属性
	
new	Vue({
		el:"id标签名称",		//用于指定HTML标签下可以进行vue数据渲染
		data(){					//用于数据渲染所需要的那些数据
		
		},
		methods:{				//用于指定HTML标签下可以进行调用该实例里面的一些方法
		
		},
		components:{			//挂载对应的模板,可以在指定HTML标签下使用该这些模板
			"child-component":模板块
										
		},
		props:['hello'],		//也就是props是子组件访问父组件数据的唯一接口。
		
		watch: {
				//在线描述：https://blog.csdn.net/wangxiaoxiaosen/article/details/78487089
		},
		 beforeCreate() {		//用于当该实例被创建后会自动出发的一些生命周期函数
         this.show()
         // 这是第一个生命周期函数，表示实例完全被创建出来之前，会执行它
         // console.log(this.msg)
         // 注意：在beforeCreate生命周期函数执行的时候，data和methods中的数据都还没有没初始化
       },
       created() {
         // 这是第二个生命周期函数
         // console.log(this.msg)
         // this.show()
         // 在 created 中，data 和 methods 都已经被初始化好了！
         // 如果要调用methods中的方法，或者操作 data 中的数据，最早只能在 created 中操作
       },
       beforeMount() {
         // 这是第3个生命周期函数，表示模板已经在内存中编辑完成了，但是尚未把 模板渲染到 页面中
         // console.log(document.getElementById('h3').innerText)
         // 在 beforeMount 执行的时候，页面中的元素，还没有被真正替换过来，只是之前写的一些模板字符串
       },
       mounted() {
         // 这是遇到的第4个生命周期函数，表示，内存中的模板，已经真实的挂载到了页面中，用户已经可以看到渲染好的页面了
         // console.log(document.getElementById('h3').innerText)
         // 注意：mounted是实例创建期间的最后一个生命周期函数，当执行完mounted就表示，实例已经被完全创建好了
       },
 
       // 接下来的是运行中的两个事件
       beforeUpdate() { 
         // 这时候，表示 我们的界面还没有被更新【数据被更新了吗？  数据肯定被更新了】
         /* console.log('界面上元素的内容：' + document.getElementById('h3').innerText)
         console.log('data 中的 msg 数据是：' + this.msg) */
         // 得出结论： 当执行beforeUpdate的时候，页面中的显示的数据，还是旧的，此时data数据是最新的，页面尚未和最新的数据保持同步
       },
       updated() {
         console.log('界面上元素的内容：' + document.getElementById('h3').innerText)
         console.log('data 中的 msg 数据是：' + this.msg)
         // updated 事件执行的时候，页面和 data 数据已经保持同步了，都是最新的
       },
       beforeDestroy() {
 
       },
       destroyed() {
 
       }	
	})